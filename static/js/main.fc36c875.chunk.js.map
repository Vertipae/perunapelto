{"version":3,"sources":["components/Navbar.js","components/Square.js","components/LinkButton.js","components/FrontPage.js","components/PotatoVariety.js","components/Contact.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["useState","background","setBackground","divRef","createRef","useEffect","console","log","cachedRef","current","observer","IntersectionObserver","e","intersectionRatio","threshold","observe","unobserve","className","ref","href","color","style","backgroundColor","children","click","FrontPage","id","Square","PotatoVariety","Contact","type","name","required","cols","rows","App","Navbar","Footer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8OAEe,aAAO,IAAD,EACiBA,oBAAS,GAD1B,mBACZC,EADY,KACAC,EADA,KAEbC,EAASC,sBAoBf,OAnBAC,qBAAU,WACRC,QAAQC,IAAIN,KACX,CAACA,IAEJI,qBAAU,WACR,IAAMG,EAAYL,EAAOM,QACvBC,EAAW,IAAIC,sBACb,gBAAEC,EAAF,2BAASV,EAAcU,EAAEC,kBAAoB,KAC7C,CAAEC,UAAW,CAAC,KAKlB,OAFAJ,EAASK,QAAQP,GAEV,WACLE,EAASM,UAAUR,MAGpB,IAGD,yBAAKS,UAAWhB,EAAa,WAAa,GAAIiB,IAAKf,GACjD,mCAEA,wBAAIc,UAAU,YACZ,4BACE,uBAAGE,KAAK,cAAR,YAEF,4BACE,uBAAGA,KAAK,kBAAR,cAEF,4BACE,uBAAGA,KAAK,YAAR,qBAIJ,uCCtCS,cAAgB,IAAbC,EAAY,EAAZA,MAChB,OAAO,yBAAKH,UAAU,SAASI,MAAO,CAAEC,gBAAiBF,MCD5C,cAA0B,IAAvBG,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,MAC1B,OACE,uBAAGL,KAAMK,GACP,yBAAKP,UAAU,UAAUM,KCDhB,SAASE,IACtB,OACE,yBAAKR,UAAU,kBAAkBS,GAAG,aAClC,yBAAKT,UAAU,kBACb,yBAAKA,UAAU,WACb,kBAACU,EAAD,CAAQP,MAAM,YACd,2DAEF,yBAAKH,UAAU,WACb,kBAACU,EAAD,CAAQP,MAAM,YACd,kLAMF,kBAAC,EAAD,CAAQI,MAAM,YAAd,oBAEF,yBAAKP,UAAU,qBCnBN,SAASW,IACtB,OACE,yBAAKX,UAAU,kBAAkBS,GAAG,iBAClC,yBAAKT,UAAU,mBACf,yBAAKA,UAAU,mBACb,wBAAII,MAAO,CAAED,MAAO,UAApB,8BACA,yBAAKH,UAAU,WACb,kBAACU,EAAD,CAAQP,MAAM,YACd,uBAAGC,MAAO,CAAED,MAAO,UAAnB,0FAKF,yBAAKH,UAAU,WACb,kBAACU,EAAD,CAAQP,MAAM,YACd,uBAAGC,MAAO,CAAED,MAAO,UAAnB,iEChBK,SAASS,IACtB,OACE,yBAAKZ,UAAU,kBAAkBS,GAAG,WAClC,yBAAKT,UAAU,kBACb,8BACE,+CACA,uCACA,2BAAOa,KAAK,OAAOC,KAAK,OAAOC,UAAQ,IACvC,mDACA,2BAAOF,KAAK,QAAQC,KAAK,QAAQC,UAAQ,IACzC,uCACA,2BAAOF,KAAK,OAAOC,KAAK,UAAUC,UAAQ,IAC1C,yCACA,8BAAUD,KAAK,UAAUC,UAAQ,EAACC,KAAK,KAAKC,KAAK,MACjD,4BAAQJ,KAAK,UAAb,yBAGJ,yBAAKb,UAAU,qB,UCjBN,aACb,OACE,yBAAKA,UAAU,UACb,yBAAKA,UAAU,aACb,4CACA,gDACA,oEACA,+CAEF,+CCYSkB,MAff,WACE,OACE,yBAAKlB,UAAU,OACb,yBAAKA,UAAU,OACf,kBAACmB,EAAD,MACA,yBAAKnB,UAAU,kBACb,kBAACQ,EAAD,MACA,kBAACG,EAAD,MACA,kBAACC,EAAD,OAEF,kBAACQ,EAAD,QCNcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjD,QAAQiD,MAAMA,EAAMC,c","file":"static/js/main.fc36c875.chunk.js","sourcesContent":["import React, { useEffect, useState, createRef } from \"react\"\r\n\r\nexport default () => {\r\n  const [background, setBackground] = useState(false)\r\n  const divRef = createRef()\r\n  useEffect(() => {\r\n    console.log(background)\r\n  }, [background])\r\n\r\n  useEffect(() => {\r\n    const cachedRef = divRef.current,\r\n      observer = new IntersectionObserver(\r\n        ([e]) => setBackground(e.intersectionRatio < 1),\r\n        { threshold: [1] }\r\n      )\r\n\r\n    observer.observe(cachedRef)\r\n\r\n    return function () {\r\n      observer.unobserve(cachedRef)\r\n    }\r\n    //eslint-disable-next-line\r\n  }, [])\r\n\r\n  return (\r\n    <nav className={background ? \"stickyBg\" : \"\"} ref={divRef}>\r\n      <p>Logo</p>\r\n\r\n      <ul className='navLinks'>\r\n        <li>\r\n          <a href='#frontpage'>Etusivu</a>\r\n        </li>\r\n        <li>\r\n          <a href='#potatovariety'>Lajikkeet</a>\r\n        </li>\r\n        <li>\r\n          <a href='#contact'>Ota yhteyttä</a>\r\n        </li>\r\n      </ul>\r\n\r\n      <p>Button</p>\r\n    </nav>\r\n  )\r\n}\r\n","import React from \"react\"\r\n\r\nexport default ({ color }) => {\r\n  return <div className='square' style={{ backgroundColor: color }} />\r\n}\r\n","import React from \"react\"\r\n\r\nexport default ({ children, click }) => {\r\n  return (\r\n    <a href={click}>\r\n      <div className='button'>{children}</div>\r\n    </a>\r\n  )\r\n}\r\n","import React from \"react\"\r\nimport Square from \"./Square\"\r\nimport Button from \"./LinkButton\"\r\n\r\nexport default function FrontPage() {\r\n  return (\r\n    <div className='row-container a' id='frontpage'>\r\n      <div className='column-left a1'>\r\n        <div className='textRow'>\r\n          <Square color='#e2cd0f' />\r\n          <h1>Lorem ipsum dolor sit amet</h1>\r\n        </div>\r\n        <div className='textRow'>\r\n          <Square color='#e2cd0f' />\r\n          <p>\r\n            Consectetur adipiscing elit, sed do eiusmod tempor incididunt ut\r\n            labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud\r\n            exercitation\r\n          </p>\r\n        </div>\r\n        <Button click='#contact'>Ota yhteyttä</Button>\r\n      </div>\r\n      <div className='column-right a2'></div>\r\n    </div>\r\n  )\r\n}\r\n","import React from \"react\"\r\nimport Square from \"./Square\"\r\n\r\nexport default function PotatoVariety() {\r\n  return (\r\n    <div className='row-container b' id='potatovariety'>\r\n      <div className='column-left b1'></div>\r\n      <div className='column-right b2'>\r\n        <h3 style={{ color: \"white\" }}>Maecenas sodales et lacus:</h3>\r\n        <div className='textRow'>\r\n          <Square color='#C2E595' />\r\n          <p style={{ color: \"white\" }}>\r\n            Sed ut perspiciatis unde omnis iste natus error sit voluptatem\r\n            accusantium doloremque\r\n          </p>\r\n        </div>\r\n        <div className='textRow'>\r\n          <Square color='#C2E595' />\r\n          <p style={{ color: \"white\" }}>\r\n            Nam a nunc sit amet ligula commodo molestie sed vel justo.\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from \"react\"\r\n\r\nexport default function Contact() {\r\n  return (\r\n    <div className='row-container c' id='contact'>\r\n      <div className='column-left c1'>\r\n        <form>\r\n          <h2>Ota yhteyttä</h2>\r\n          <label>Nimi</label>\r\n          <input type='text' name='name' required />\r\n          <label>Sähköposti</label>\r\n          <input type='email' name='email' required />\r\n          <label>Aihe</label>\r\n          <input type='text' name='heading' required />\r\n          <label>Viesti</label>\r\n          <textarea name='message' required cols='30' rows='8' />\r\n          <button type='submit'>Lähetä viesti</button>\r\n        </form>\r\n      </div>\r\n      <div className='column-right c2'></div>\r\n    </div>\r\n  )\r\n}\r\n","import React from \"react\"\r\n\r\nexport default () => {\r\n  return (\r\n    <div className='footer'>\r\n      <div className='footerRow'>\r\n        <h4>Yhteystiedot</h4>\r\n        <h5>+358 123 123 123</h5>\r\n        <h5>Loremipsum Kuja 5B 55100 Oulu, Suomi</h5>\r\n        <h5>email@email.fi</h5>\r\n      </div>\r\n      <div>Google mappi</div>\r\n    </div>\r\n  )\r\n}\r\n","import React from \"react\"\nimport Navbar from \"./components/Navbar\"\nimport FrontPage from \"./components/FrontPage\"\nimport PotatoVariety from \"./components/PotatoVariety\"\nimport Contact from \"./components/Contact\"\nimport \"./App.css\"\nimport Footer from \"./components/Footer\"\n\nfunction App() {\n  return (\n    <div className='App'>\n      <div className='bg' />\n      <Navbar />\n      <div className='grid-container'>\n        <FrontPage />\n        <PotatoVariety />\n        <Contact />\n      </div>\n      <Footer />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}